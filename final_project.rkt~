;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname final_project) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
; Name: Siheng (Gino) Wang
; Date: 02/19/2016

(require "snake-lib.rkt")

; a game is
; (make-game snake food obstacles nat)
; (define-struct game [snake food obstacles ticks])

; a direction is either ;
; - 'up
; - 'down
; - 'left
; - 'right

; a snake is
; (make-snake direction body)
;(define-struct snake [heading segments])

; a body is either
; - (cons posn empty)
; - (cons posn body)

; x-coordinates increase from 1 to board-length (inclusive) toward the right 
; y-coordinates increase from 1 to board-length (inclusive) toward the top
; the default value for board-length is 50.

; a food is either
; - empty
; - (cons posn food)

; obstacles is either
; - empty
; - (cons posn obstacles)

; game-start
(define game-start (make-game
                    (make-snake 'up (list (make-posn 25 25)))
                    (list (make-posn 20 20) (make-posn 30 30))
                    (list (make-posn 10 10) (make-posn 35 35))
                    0))

; add-food : game posn -> game
; This function adds a morsel of food at the specified board position.
(define (add-food g p)
  (make-game (game-snake g) (cons p (game-food g)) (game-obstacles g) (game-ticks g)))

(check-expect (add-food (make-game (make-snake 'up (list (make-posn 1 1))) empty empty 1) (make-posn 1 1))
              (make-game empty (cons (make-posn 1 1) empty) empty 1))
(check-expect (add-food (make-game (make-snake 'up (list (make-posn 1 1))) empty empty 1) (make-posn 10 10))
              (make-game empty (cons (make-posn 10 10) empty) empty 1))



; change-direction : game direction -> game
; This function changes the direction in which the snake is traveling.
(define (change-direction g d)
  (make-game (make-snake d (snake-segments (game-snake g)))
             (game-food g)
             (game-obstacles g)
             (game-ticks g)))

(check-expect (change-direction (make-game (make-snake 'up empty) empty empty 1)
                                'left)
              (make-game (make-snake 'left empty) empty empty 1))
(check-expect (change-direction (make-game (make-snake 'up empty) empty empty 1)
                                'right)
              (make-game (make-snake 'right empty) empty empty 1))



; game-score : game -> nat
(define (game-score g)
  (- (* 100 (length (snake-segments (game-snake g)))) (game-ticks g)))

(check-expect (game-score (make-game (make-snake empty (list (make-posn 1 1)
                                                             (make-posn 1 2)))
                                     empty
                                     empty
                                     10))
              (- (* 2 100) 10))
(check-expect (game-score (make-game (make-snake empty (list (make-posn 1 1)
                                                             (make-posn 1 2)
                                                             (make-posn 1 3)))
                                     empty
                                     empty
                                     10))
              (- (* 3 100) 10))


; (Helper Function 1 for game-over? and advance-game)
; compare-coord: posn list-of-posn -> boolean
; returns true if the posn is equal to one of the posns in the list
(define (compare-coord p1 lp2)
  (cond [(or (empty? lp2) (empty? p1)) false]
        [else (or (and (= (posn-x p1) (posn-x (first lp2)))
                       (= (posn-y p1) (posn-y (first lp2))))
                  (compare-coord p1 (rest lp2)))]))

(check-expect (compare-coord (make-posn 1 1) empty) false)
(check-expect (compare-coord (make-posn 1 1) (list (make-posn 1 2) (make-posn 1 1))) true)

; (Helper Function 2 for game-over?) 
; compare-coord2: list-of-posn -> boolean
; returns true if any x or y of a posn in the list does not fall between 1 and 50 inclusive
(define (compare-coord2 lp)
  (cond [(empty? lp)  false]
        [else         (or (or (or (<= (posn-x (first lp)) 0)
                                  (>= (posn-x (first lp)) 51))
                              (or (<= (posn-y (first lp)) 0)
                                  (>= (posn-y (first lp)) 51)))
                          (compare-coord2 (rest lp)))]))

(check-expect (compare-coord2 empty) false)
(check-expect (compare-coord2 (list (make-posn 20 20) (make-posn 50 50))) false)
(check-expect (compare-coord2 (list (make-posn 0 1) (make-posn 20 20))) true)
(check-expect (compare-coord2 (list (make-posn 20 20) (make-posn 50 51))) true)

; game-over? : game -> boolean
; returns true if the game is over
(define (game-over? g)
  (cond
    ; check whether runs into any obstacle
    [(compare-coord (first (snake-segments (game-snake g)))
                    (game-obstacles g))
     true]
    
    ; check whether runs into the wall
    [(compare-coord2 (snake-segments (game-snake g))) true]
    
    ; check whether runs into itself
    [(compare-coord (first (snake-segments (game-snake g)))
                    (rest (snake-segments (game-snake g))))
     true]
    
    [else   false]))

(check-expect (game-over? (make-game (make-snake empty (list (make-posn 2 2))) empty (list (make-posn 1 1)) 1))
              false)
(check-expect (game-over? (make-game (make-snake empty (list (make-posn 1 1))) empty (list (make-posn 1 1)) 1))
              true)

(check-expect (game-over? (make-game (make-snake empty (list (make-posn 20 20))) empty empty 1)) false)
(check-expect (game-over? (make-game (make-snake empty (list (make-posn 0 0))) empty empty 1)) true)

(check-expect (game-over? (make-game (make-snake empty (list (make-posn 20 20) (make-posn 20 19))) empty empty 1)) false)
(check-expect (game-over? (make-game (make-snake empty (list (make-posn 20 20) (make-posn 20 20) (make-posn 20 19))) empty empty 1)) true)

; (Helper Function 2 for advance-game)
; drop-last-from-list: list -> list
; drop the last item from the list
(define (drop-last-from-list mylist)
  (cond [(empty? (rest mylist))  empty]
        [else             (cons (first mylist) (drop-last-from-list (rest mylist)))]))

(check-expect (drop-last-from-list '(1 2 3 4)) '(1 2 3))
(check-expect (drop-last-from-list '(10 20 30 40)) '(10 20 30))

; advance-game : game -> game
(define (advance-game g)
  (if (compare-coord (first (snake-segments (game-snake g))) (game-food g))
      (make-game (make-snake (snake-heading (game-snake g))
                             (cond [(symbol=? 'up (snake-heading (game-snake g)))
                                    (cons (make-posn (posn-x (first (snake-segments (game-snake g))))
                                                     (+ 1 (posn-y (first (snake-segments (game-snake g))))))
                                          (snake-segments (game-snake g)))]
                                   
                                   [(symbol=? 'down (snake-heading (game-snake g)))
                                    (cons (make-posn (posn-x (first (snake-segments (game-snake g))))
                                                     (- (posn-y (first (snake-segments (game-snake g)))) 1))
                                          (snake-segments (game-snake g)))]
                                   
                                   [(symbol=? 'left (snake-heading (game-snake g)))
                                    (cons (make-posn (- (posn-x (first (snake-segments (game-snake g)))) 1)
                                                     (posn-y (first (snake-segments (game-snake g)))))
                                          (snake-segments (game-snake g)))]
                                   
                                   [(symbol=? 'right (snake-heading (game-snake g)))
                                    (cons (make-posn (+ 1 (posn-x (first (snake-segments (game-snake g)))))
                                                     (posn-y (first (snake-segments (game-snake g)))))
                                          (snake-segments (game-snake g)))]))
                 (filter (lambda (x) (not (equal?
                                           x
                                           (make-posn (posn-x (first (snake-segments (game-snake g))))
                                                      (posn-y (first (snake-segments (game-snake g))))
                                                      ))))
                           (game-food g))
                 (game-obstacles g)
                 (+ 1 (game-ticks g)))
      
      (make-game (make-snake (snake-heading (game-snake g))
                             (cond [(symbol=? 'up (snake-heading (game-snake g)))
                                    (cons (make-posn (posn-x (first (snake-segments (game-snake g))))
                                                     (+ 1 (posn-y (first (snake-segments (game-snake g))))))
                                          (drop-last-from-list (snake-segments (game-snake g))))]
                                   
                                   [(symbol=? 'down (snake-heading (game-snake g)))
                                    (cons (make-posn (posn-x (first (snake-segments (game-snake g))))
                                                     (- (posn-y (first (snake-segments (game-snake g)))) 1))
                                          (drop-last-from-list (snake-segments (game-snake g))))]
                                   
                                   [(symbol=? 'left (snake-heading (game-snake g)))
                                    (cons (make-posn (- (posn-x (first (snake-segments (game-snake g)))) 1)
                                                     (posn-y (first (snake-segments (game-snake g)))))
                                          (drop-last-from-list (snake-segments (game-snake g))))]
                                   
                                   [(symbol=? 'right (snake-heading (game-snake g)))
                                    (cons (make-posn (+ 1 (posn-x (first (snake-segments (game-snake g)))))
                                                     (posn-y (first (snake-segments (game-snake g)))))
                                          (drop-last-from-list (snake-segments (game-snake g))))]))
                 (game-food g)
                 (game-obstacles g)
                 (+ 1 (game-ticks g)))))

(check-expect (advance-game (make-game (make-snake 'up (list (make-posn 1 1) (make-posn 2 1)))
                                       (list (make-posn 1 1))
                                       empty
                                       10))
              (make-game (make-snake 'up (list (make-posn 1 2) (make-posn 1 1) (make-posn 2 1)))
                         empty
                         empty
                         11))
(check-expect (advance-game (make-game (make-snake 'up (list (make-posn 1 1) (make-posn 2 1)))
                                       (list (make-posn 5 5))
                                       empty
                                       10))
              (make-game (make-snake 'up (list (make-posn 1 1) (make-posn 2 1)))
                         (list (make-posn 5 5))
                         empty
                         11))

(play-game game-start advance-game add-food change-direction game-score game-over?)









